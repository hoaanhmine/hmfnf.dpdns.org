import funkin.play.song.Song;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.play.PlayStatePlaylist;
import funkin.play.PlayState;
import funkin.graphics.FunkinSprite;
import funkin.play.cutscene.VideoCutscene;
import flixel.tweens.FlxTween;
import funkin.save.Save;

class ReoccuranceSong extends Song {
  var nonsenseModule:Module;

  var playedVidCutscene:Bool = false;

  function new() {
    super('reoccurance');
  }

  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);
    if (PlayStatePlaylist.isStoryMode){
      nonsenseModule = ModuleHandler.getModule('nonsense-module');
      nonsenseModule.scriptCall('clearFailedSongs');
    }
    playedVidCutscene = false;
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

    if (!PlayStatePlaylist.isStoryMode){
      playedVidCutscene = true;
    }

    trace(playedVidCutscene);

    if (!playedVidCutscene) {
      trace('Pausing countdown to play a video cutscene (`darnell`)');

      playedVidCutscene = true;

      event.cancel(); // CANCEL THE COUNTDOWN!

			// trace('Adding black background behind cutscene over UI');
			bgSprite = new FunkinSprite(0, 0);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
			// this
			bgSprite.zIndex = -10000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

      startVideo();

      FlxTween.tween(bgSprite, { alpha: 0}, 0.25, {startDelay: 0.3}, function(){bgSprite.visible = false;});
      //PlayState.instance.startCountdown();
    }
  }

  function startVideo() {
    VideoCutscene.play(Paths.videos(this.id));
  }

  public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weeknh')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}
  function onSongEnd(event:ScriptEvent):Void {
    if (PlayStatePlaylist.isStoryMode && nonsenseModule.scriptCall('skillCheckCalculation') == 0){
      nonsenseModule.scriptCall('addFailedSong', [this.songName]);
      trace(nonsenseModule.scriptCall('getFailedSongs'));
    }
  }
}
