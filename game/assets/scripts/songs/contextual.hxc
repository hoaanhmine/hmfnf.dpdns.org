import funkin.play.song.Song;
import flixel.FlxSprite;
import funkin.play.character.BaseCharacter;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.play.PlayStatePlaylist;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.PlayState;
import funkin.play.ResultScore;
import funkin.audio.FunkinSound;
import funkin.save.Save;
import funkin.graphics.FunkinSprite;
import funkin.audio.VoicesGroup;
import funkin.Conductor;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxGradient;
import flixel.FlxG;
import flixel.util.FlxTimer;
import flixel.text.FlxBitmapText;
import flixel.graphics.frames.FlxBitmapFont;
import funkin.play.components.TallyCounter;
import flixel.math.FlxPoint;
import funkin.play.components.ClearPercentCounter;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.play.scoring.Scoring;
import funkin.graphics.FunkinCamera;
import funkin.util.BitmapUtil;
import funkin.ui.FullScreenScaleMode;

class ContextualSong extends Song {
  var nonsenseModule:Module;

  var playedVidCutscene1:Bool = false;
  var playedFakeResult:Bool = false;

  var goodChatter:Bool;

  var goodDialogue:FunkinSound;
  var badDialogue:FunkinSound;

  var bgSprite:FunkinSprite;

  static var DEF_DIRECTORY:String = 'assets/shared/sounds/';

  function new() {
    super('contextual');
  }

  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);
    nonsenseModule = ModuleHandler.getModule('nonsense-module');

    playedVidCutscene1 = false;
    playedFakeResult = false;

    // fake result screen
  }

  public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenLevel('weeknh')) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

  public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

    if (!PlayStatePlaylist.isStoryMode){
      playedVidCutscene1 = true;
      playedFakeResult = true;
    }

    trace(playedVidCutscene1);

    if (playedVidCutscene1 && !playedFakeResult) {
      playedFakeResult = true;
      event.cancel();

      startFakeResultScreen();
    }
    if (!playedVidCutscene1) {
      trace('Pausing countdown to play a video cutscene (`darnell`)');

      playedVidCutscene1 = true;

      event.cancel(); // CANCEL THE COUNTDOWN!

			// trace('Adding black background behind cutscene over UI');

      bgSprite = new FunkinSprite(0, 0);
      bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
      bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
      // this
      bgSprite.zIndex = -10000;
      PlayState.instance.add(bgSprite);
      PlayState.instance.refresh();

      startVideo(1);

      //FlxTween.tween(bgSprite, { alpha: 0}, 0.25, {startDelay: 0.3}, function(){bgSprite.visible = false;});
      //PlayState.instance.startCountdown();
    }
  }

  //#region Fake Result Screen

  //HOLY CRAP THIS CODE TOOK SO LONG TO MAKE BUT IT'S WORTH FOR THE 5 SECOND BIT

  var bgFlash:FlxSprite;
  var bgBlack:FlxSprite;
  var black:FlxSprite;

  var resultScreenMusic:FunkinSound;
  var confirmSound:FunkinSound;

  var clearPercentSmall:ClearPercentCounter;
  var speedOfTween:FlxPoint = FlxPoint.get(-1, 1);
  var characterAtlasAnimations:Array<
  {
    sprite:FlxAtlasSprite,
    delay:Float,
    forceLoop:Bool,
    startFrameLabel:String,
    sound:String
  }> = [];
  final cameraResults:FunkinCamera;

  function startFakeResultScreen():Void { // this is for the fake result screen bit because I thought it'd be funny
    // can't really have the week title in here tho because it just breaks for some reason. but idc, I don't think people would notice lmao
    cameraResults = new FunkinCamera('resultsBG', 0, 0, FlxG.width, FlxG.height);
    FlxG.cameras.add(cameraResults, false);

    var cutsceneDelay:Float = 2;

    var nonsenseDialogueLmao:FunkinSound = FunkinSound.load(Paths.sound("HoldupNotdead"), 1.0, false, false, false);
    var fartSound:FunkinSound = FunkinSound.load(Paths.sound("fard"), 0.7, false, false, false);

    var topBar:FlxSprite = new FlxSprite();
    topBar.loadGraphic(BitmapUtil.createResultsBar());

    var bg:FlxSprite = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFFFECC5C, 0xFFFDC05C], 90);
    bg.cameras = [cameraResults]; // Show over the HUD but below the video.
    // this
    bg.screenCenter();
    bg.zIndex = -10001;
    resultScreenGroup.push(bg);
    PlayState.instance.add(bg);

    bgFlash = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFFFFF1A6, 0xFFFFF1BE], 90);
    bgFlash.scrollFactor.set();
    bgFlash.cameras = [cameraResults];
    bgFlash.visible = false;
    resultScreenGroup.push(bgFlash);
    bgFlash.zIndex = -10001;

    clearPercentSmall = new ClearPercentCounter(FlxG.width / 2 + 300, FlxG.height / 2 - 100, 100, true);
    clearPercentSmall.zIndex = -10000;
    clearPercentSmall.visible = false;
    resultScreenGroup.push(clearPercentSmall);
    clearPercentSmall.cameras = [cameraResults];

    var diffSpr:String = 'diff_hard';
    var difficulty:FlxSprite = new FlxSprite().loadGraphic(Paths.image("resultScreen/" + diffSpr));
    difficulty.zIndex = -10000;
    difficulty.cameras = [cameraResults];
    resultScreenGroup.push(difficulty);
    PlayState.instance.add(difficulty);

    difficulty.y += (topBar.height - 148);
    clearPercentSmall.y += (topBar.height - 148);

    difficulty.x = 555 + FullScreenScaleMode.gameNotchSize.x;

    var diffYTween:Float = 122;

    difficulty.y = -difficulty.height;
    FlxTween.tween(difficulty, {y: diffYTween + (topBar.height - 148)}, 0.5, {ease: FlxEase.expoOut, startDelay: 0.8});

    if (clearPercentSmall != null)
    {
      clearPercentSmall.x = (difficulty.x + difficulty.width) + 60;
      clearPercentSmall.y = -clearPercentSmall.height;
      FlxTween.tween(clearPercentSmall, {y: (122 - 5) + (topBar.height - 148)}, 0.5, {ease: FlxEase.expoOut, startDelay: 0.85});
    }

    topBar.y = -topBar.height;
    topBar.cameras = [cameraResults];
    topBar.zIndex = -10000;
    resultScreenGroup.push(topBar);
		PlayState.instance.add(topBar);

    FlxTween.tween(topBar, {y: 0}, 7 / 24, {ease: FlxEase.quartOut, startDelay: 3 / 24});

    bgBlack = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFF000000, 0xFF000000], 90);
    bgBlack.scrollFactor.set();
    bgBlack.cameras = [cameraResults];
    resultScreenGroup.push(bgBlack);
    bgBlack.alpha = 0;
    bgBlack.zIndex = -10000;
    PlayState.instance.add(bgBlack);

    var animDataArray:Array<PlayerResultsAnimationData> = [
      {
        assetPath: "shared:fakeResultScreen/gf",
        scale: 0.93,
        delay: 0.25,
        offsets: [219, 0],
      },
      {
        assetPath: "shared:fakeResultScreen/bf",
        scale: 0.93,
        offsets: [219, 0],
      }
    ];

    for (animData in animDataArray)
    {
      var animPath:String = "";
      var animLibrary:String = "";

      if (animData.assetPath != null)
      {
        animPath = Paths.stripLibrary(animData.assetPath);
        animLibrary = Paths.getLibrary(animData.assetPath);
      }
      var offsets = animData.offsets ?? [0, 0];

      @:nullSafety(Off)
      var animation:FlxAtlasSprite = null;

      var xPos = offsets[0] + (FullScreenScaleMode.gameCutoutSize.x / 2);
      var yPos = offsets[1];

      if (animData.scriptClass != null) animation = ScriptedFlxAtlasSprite.init(animData.scriptClass, xPos, yPos);
      else
        animation = new FlxAtlasSprite(xPos, offsets[1], Paths.animateAtlas(animPath, animLibrary));

      if (animation == null) continue;

      animation.zIndex = -10000;

      animation.scale.set(animData.scale ?? 1.0, animData.scale ?? 1.0);

      if (!(animData.looped ?? true))
      {
        // Animation is not looped.
        animation.onAnimationComplete.add((_name:String) -> {
          if (animation != null)
          {
            animation.anim.pause();
          }
        });
      }
      // Hide until ready to play.
      animation.visible = false;
      // Queue to play.
      characterAtlasAnimations.push(
        {
          sprite: animation,
          delay: animData.delay ?? 0.0,
          forceLoop: (animData.loopFrame ?? -1) == 0,
          startFrameLabel: (animData.startFrameLabel ?? ""),
        });
      // Add to the scene.
      resultScreenGroup.push(animation);
      animation.cameras = [cameraResults];
      PlayState.instance.add(animation);
    }


    var soundSystem:FlxSprite = FunkinSprite.createSparrow(-15 + FullScreenScaleMode.gameNotchSize.x, -180, 'resultScreen/soundSystem');
    soundSystem.animation.addByPrefix("idle", "sound system", 24, false);
    soundSystem.visible = false;
    new FlxTimer().start(8 / 24, _ -> {
      soundSystem.animation.play("idle");
      soundSystem.visible = true;
    });
    soundSystem.zIndex = -10000;
    soundSystem.cameras = [cameraResults];
    resultScreenGroup.push(soundSystem);
    PlayState.instance.add(soundSystem);


    var resultsAnim = FunkinSprite.createSparrow(FlxG.width - (1480 + (FullScreenScaleMode.gameCutoutSize.x / 2)), -10, "resultScreen/results");
    resultsAnim.animation.addByPrefix("result", "results instance 1", 24, false);
    resultsAnim.zIndex = -10000;
    resultsAnim.cameras = [cameraResults];
    resultScreenGroup.push(resultsAnim);
    PlayState.instance.add(resultsAnim);
    new FlxTimer().start(6 / 24, _ -> {
      resultsAnim.visible = true;
      resultsAnim.animation.play("result");
    });

    var ratingsPopin = FunkinSprite.createSparrow(-135 + FullScreenScaleMode.gameNotchSize.x, 135, "resultScreen/ratingsPopin");
    ratingsPopin.animation.addByPrefix("idle", "Categories", 24, false);
    ratingsPopin.visible = false;
    ratingsPopin.zIndex = -10000;
    ratingsPopin.cameras = [cameraResults];
    resultScreenGroup.push(ratingsPopin);
    PlayState.instance.add(ratingsPopin);
    new FlxTimer().start(21 / 24, _ -> {
      ratingsPopin.visible = true;
      ratingsPopin.animation.play("idle");
    });

    var scorePopin = FunkinSprite.createSparrow(-180 + FullScreenScaleMode.gameNotchSize.x, 515, "resultScreen/scorePopin");
    scorePopin.animation.addByPrefix("score", "tally score", 24, false);
    scorePopin.visible = false;
    scorePopin.zIndex = -10000;
    scorePopin.cameras = [cameraResults];
    resultScreenGroup.push(scorePopin);
    PlayState.instance.add(scorePopin);
    new FlxTimer().start(36 / 24, _ -> {
      scorePopin.visible = true;
      scorePopin.animation.play("score");
      scorePopin.animation.finishCallback = anim -> {};
    });

    var score = new ResultScore(35 + FullScreenScaleMode.gameNotchSize.x, 305, 10, 420699);
    new FlxTimer().start(37 / 24, _ -> {
      score.visible = true;
      score.animateNumbers();
      startRankTallySequence();
    });
    score.cameras = [cameraResults];
    score.visible = false;
    score.zIndex = -10000;
    resultScreenGroup.push(score);
    PlayState.instance.add(score);

    new FlxTimer().start(95 / 24, _ -> {
      showSmallClearPercent();

      for (atlas in characterAtlasAnimations)
      {
        new FlxTimer().start(atlas.delay, _ -> {
          if (atlas.sprite == null) return;
          atlas.sprite.visible = true;
          atlas.sprite.playAnimation(atlas.startFrameLabel);
        });
      }
      new FlxTimer().start(48/24, _ -> {
        FlxTween.tween(black, {alpha: 1}, 0.5,
          {
            ease: FlxEase.expoOut,
            onComplete: function(_) {
              deleteFakeResult();
              startVideo(2);
              FlxTween.tween(bgSprite, { alpha: 0}, 0.25, {startDelay: 0.3}, function(){bgSprite.visible = false;});
            }
          });
      });
      new FlxTimer().start(8/24, _ -> {
        FlxTween.tween(bgBlack, {alpha: 0.5}, 5 / 24,
        {
          ease: FlxEase.quartOut
        });

        resultScreenMusic.stop();
        confirmSound.stop();

        nonsenseDialogueLmao.play();
        fartSound.play();

      });
    });

    var hStuf:Int = 50;

    var ratingGrp:Array<TallyCounter> = [];

    var totalHit:TallyCounter = new TallyCounter(375, hStuf * 3, 690);
    totalHit.cameras = [cameraResults];
    totalHit.zIndex = -10000;
    ratingGrp.push(totalHit);
    PlayState.instance.add(totalHit);

    var maxCombo:TallyCounter = new TallyCounter(375, hStuf * 4, 590);
    maxCombo.cameras = [cameraResults];
    maxCombo.zIndex = -10000;
    ratingGrp.push(maxCombo);
    PlayState.instance.add(maxCombo);

    hStuf += 2;
    var extraYOffset:Float = 7;

    hStuf += 2;

    var tallySick:TallyCounter = new TallyCounter(230, (hStuf * 5) + extraYOffset, 395, 0xFF89E59E);
    tallySick.cameras = [cameraResults];
    tallySick.zIndex = -10000;
    ratingGrp.push(tallySick);
    PlayState.instance.add(tallySick);

    var tallyGood:TallyCounter = new TallyCounter(210, (hStuf * 6) + extraYOffset, 201, 0xFF89C9E5);
    tallyGood.cameras = [cameraResults];
    tallyGood.zIndex = -10000;
    ratingGrp.push(tallyGood);
    PlayState.instance.add(tallyGood);

    var tallyBad:TallyCounter = new TallyCounter(190, (hStuf * 7) + extraYOffset, 3, 0xFFE6CF8A);
    tallyBad.cameras = [cameraResults];
    tallyBad.zIndex = -10000;
    ratingGrp.push(tallyBad);
    PlayState.instance.add(tallyBad);

    var tallyShit:TallyCounter = new TallyCounter(220, (hStuf * 8) + extraYOffset, 1, 0xFFE68C8A);
    tallyShit.cameras = [cameraResults];
    tallyShit.zIndex = -10000;
    ratingGrp.push(tallyShit);
    PlayState.instance.add(tallyShit);

    var tallyMissed:TallyCounter = new TallyCounter(260, (hStuf * 9) + extraYOffset, 99, 0xFFC68AE6);
    tallyMissed.cameras = [cameraResults];
    tallyMissed.zIndex = -10000;
    ratingGrp.push(tallyMissed);
    PlayState.instance.add(tallyMissed);

    score.visible = false;
    score.zIndex = -10000;
    PlayState.instance.add(score);

    var index:Int = 1;
    for (rating in ratingGrp)
    {
      resultScreenGroup.push(rating);
      rating.visible = false;
      new FlxTimer().start((0.3 * index) + 1.20, _ -> {
        rating.visible = true;
        FlxTween.tween(rating, {curNumber: rating.neededNumber}, 0.5, {ease: FlxEase.quartOut});
      });
      index += 1;
    }

    new FlxTimer().start(5 / 24, _ -> {
      resultScreenMusic = FunkinSound.load(Paths.music('resultsNORMAL/resultsNORMAL'), 1.0, false, false, false);
      resultScreenMusic.play();
    });

    PlayState.instance.refresh();
  }

  function showSmallClearPercent():Void
  {
    if (clearPercentSmall != null)
    {
      PlayState.instance.add(clearPercentSmall);
      clearPercentSmall.visible = true;
      clearPercentSmall.flash(true);
      new FlxTimer().start(0.4, _ -> {
        clearPercentSmall.flash(false);
      });

      clearPercentSmall.curNumber = clearPercentTarget;
      clearPercentSmall.zIndex = -10001;
      PlayState.instance.refresh();
    }

    new FlxTimer().start(2.5, _ -> {
      movingSongStuff = true;
    });
  }

  var resultScreenGroup:Array<FunkinSprite> = [];
  var clearPercentTarget:Int = 100;
  var clearPercentLerp:Int = 0;

  function startRankTallySequence():Void
  {
    bgFlash.visible = true;
    FlxTween.tween(bgFlash, {alpha: 0}, 5 / 24);
    // NOTE: Only divide if totalNotes > 0 to prevent divide-by-zero errors.
    var clearPercentFloat = 87;
    clearPercentTarget = Math.floor(clearPercentFloat);
    // Prevent off-by-one errors.

    clearPercentLerp = Std.int(Math.max(0, clearPercentTarget - 36));

    var clearPercentCounter:ClearPercentCounter = new ClearPercentCounter(FlxG.width / 2 + 190, FlxG.height / 2 - 70, clearPercentLerp);
    FlxTween.tween(clearPercentCounter, {curNumber: clearPercentTarget}, 58 / 24,
      {
        ease: FlxEase.quartOut,
        onUpdate: _ -> {
          clearPercentLerp = Math.round(clearPercentLerp);
          clearPercentCounter.curNumber = Math.round(clearPercentCounter.curNumber);
          // Only play the tick sound if the number increased.
          if (clearPercentLerp != clearPercentCounter.curNumber)
          {
            // trace('$clearPercentLerp and ${clearPercentCounter.curNumber}');
            clearPercentLerp = clearPercentCounter.curNumber;
            FunkinSound.playOnce(Paths.sound('scrollMenu'));
          }
        },
        onComplete: _ -> {
          // Play confirm sound.
          confirmSound = FunkinSound.load(Paths.sound('confirmMenu'), 1.0, false, false, false);
          confirmSound.play();

          // Just to be sure that the lerp didn't mess things up.
          clearPercentCounter.curNumber = clearPercentTarget;

          clearPercentCounter.flash(true);
          new FlxTimer().start(0.4, _ -> {
            clearPercentCounter.flash(false);
          });

          // displayRankText();

          // previously 2.0 seconds
          new FlxTimer().start(0.25, _ -> {
            FlxTween.tween(clearPercentCounter, {alpha: 0}, 0.5,
              {
                startDelay: 0.5,
                ease: FlxEase.quartOut,
                onComplete: _ -> {
                  PlayState.instance.remove(clearPercentCounter);
                }
              });

            // afterRankTallySequence();
          });
        }
      });
    clearPercentCounter.zIndex = -10001;
    clearPercentCounter.cameras = [cameraResults];
    PlayState.instance.add(clearPercentCounter);

    black = FlxGradient.createGradientFlxSprite(FlxG.width, FlxG.height, [0xFF000000, 0xFF000000], 90);
    black.scrollFactor.set();
    black.cameras = [cameraResults];
    resultScreenGroup.push(black);
    black.alpha = 0;
    black.zIndex = -9999;
    // bgFlash.cameras = [cameraResults];
    PlayState.instance.add(black);

    PlayState.instance.refresh();
  }

  function deleteFakeResult():Void{
    if (resultScreenGroup != null){
      for (item in resultScreenGroup){
        PlayState.instance.remove(item);
      }
      resultScreenGroup = [];
    }

    if (bgFlash != null){
      PlayState.instance.remove(bgFlash);
      bgFlash = null;
    }

    if (bgBlack != null){
      PlayState.instance.remove(bgBlack);
      bgBlack = null;
    }

    if (clearPercentSmall != null){
      PlayState.instance.remove(clearPercentSmall);
      clearPercentSmall = null;
    }

    if (black != null){
      black.alpha = 0;
      PlayState.instance.remove(black);
      black = null;
    }

    if (cameraResults != null){
      FlxG.cameras.remove(cameraResults, false);
      cameraResults = null;
    }
  }
  //#endregion

  function onSongLoaded(event:SongLoadScriptEvent):Void {
    var playStateVocals:VoicesGroup = PlayState.instance.vocals;

    var goodChatter:FunkinSound = FunkinSound.load(Paths.voices(this.id, '-chatter-good'), 0.0);
    var badChatter:FunkinSound = FunkinSound.load(Paths.voices(this.id, '-chatter-bad'), 0.0);

    if (playStateVocals.getOpponentVoice(1) == null){
      playStateVocals.addOpponentVoice(goodChatter);
      playStateVocals.addOpponentVoice(badChatter);
    }
    goodDialogue = playStateVocals.getOpponentVoice(1);
    badDialogue = playStateVocals.getOpponentVoice(2);
  }

  function onSongStart(event:ScriptEvent):Void {
    goodChatter = false;

    goodDialogue.volume = 0;
    badDialogue.volume = 0;
  }

  function onSongEnd(event:ScriptEvent):Void {
    if (!PlayStatePlaylist.isStoryMode) return;

    if (!(nonsenseModule.scriptCall('skillCheckCalculation') == 0 && nonsenseModule.scriptCall('getFailedSongs').length == 2)){
      removeSongPlaylist('get-out');
    }else{
      removeSongPlaylist('gibberish');
    }

    if (nonsenseModule.scriptCall('skillCheckCalculation') == 0){
      nonsenseModule.scriptCall('addFailedSong', [this.songName]);
      trace(nonsenseModule.scriptCall('getFailedSongs'));
    }
  }

  function removeSongPlaylist(cursongName: String):Void {
    if (PlayStatePlaylist.isStoryMode){
      PlayStatePlaylist.playlistSongIds.remove(cursongName);
    }
  }
  function addSongPlaylist(cursongName: String):Void {
    if (PlayStatePlaylist.isStoryMode){
      PlayStatePlaylist.playlistSongIds.push(cursongName);
    }
  }

  function onBeatHit(event:SongTimeScriptEvent):Void {
    if (!(event.beat > 130 && event.beat < 147)) return;

    if (event.beat == 131){
      if (nonsenseModule.scriptCall('skillCheckCalculation') >= 1){
        goodChatter = true;
        goodDialogue.volume = .7;
      }else{
        badDialogue.volume = .7;
      }
    }

    if (goodChatter){
      switch (event.beat){
        case 134:
          focusCam('dad', -100, 0, 18);
          zoomCam(1, 12);
          playAnim('dad', 'contextualGood');
        case 140:
          focusCam('bf', 200, 0, 18);
          zoomCam(1.2, 12);
          blackSquare(.3,2);
          playAnim('bf', 'fingerEvent');
      }
    }else{ //bad chatter
      switch (event.beat){
        case 132:
          //dude you really suck at this
          focusCam('dad', -100, 0, 18);
          zoomCam(1, 12);
          playAnim('dad', 'contextualBad');
        case 138:
          focusCam('bf', 200, 0, 18);
          zoomCam(1.2, 12);
          playAnim('bf', 'dabEvent');
      }
    }
  }

  function onStepHit(event:SongTimeScriptEvent):Void {
    if (goodChatter){
      switch (event.step){
        case 554:
          focusCam('bf', 100, 0, 18);
          playAnim('bf', 'singUP');
        case 566:
          focusCam('dad', -150, 0, 18);
          zoomCam(1.3, 18);
      }
    }else{
      switch (event.step){
        case 546:
          focusCam('bf', 100, 0, 18);
          playAnim('bf', 'singUP');
        case 558:
          blackSquare(.3,2);
          focusCam('dad', -150, 0, 18);
          zoomCam(1.25, 12);
        case 571:
          blackSquare(0,8);
          focusCam('dad', -100, 0, 18);
          zoomCam(1, 12);
      }
    }
  }

  //Event functions
  function playAnim(target:String, anim:String):Void {
    switch (target){
      case 'bf':
        var curBf:BaseCharacter = PlayState.instance.currentStage.getBoyfriend();
        curBf.playAnimation(anim);
      case 'dad':
        var curDad:BaseCharacter = PlayState.instance.currentStage.getDad();
        curDad.playAnimation(anim);
    }
  }

  function focusCam(target:String = "", posX:Float = 0, posY:Float = 0, duration:Float = 0):Void{
    var targetX:Float = posX;
    var targetY:Float = posY;

    switch (target)
    {
      case 'bf': // Boyfriend (focus on player)
        if (PlayState.instance.currentStage.getBoyfriend() == null)
        {
          trace('No BF to focus on.');
          return;
        }
        trace('Focusing camera on player.');
        var bfPoint = PlayState.instance.currentStage.getBoyfriend().cameraFocusPoint;
        targetX += bfPoint.x;
        targetY += bfPoint.y;

      case 'dad': // Dad (focus on opponent)
        if (PlayState.instance.currentStage.getDad() == null)
        {
          trace('No dad to focus on.');
          return;
        }
        trace('Focusing camera on opponent.');
        var dadPoint = PlayState.instance.currentStage.getDad().cameraFocusPoint;
        targetX += dadPoint.x;
        targetY += dadPoint.y;
    }

    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;

    PlayState.instance.tweenCameraToPosition(targetX, targetY, durSeconds, FlxEase.expoOut);
  }

  function zoomCam(zoom:Float = 1.0, duration:Float = 4.0):Void {
    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;

    PlayState.instance.tweenCameraZoom(zoom, durSeconds, false, FlxEase.expoOut);
  }

  function blackSquare(opacity:Float = 0.0, duration:Float = 4.0):Void {
    if (PlayState.instance.currentStage == null || PlayState.instance.currentStage.getNamedProp("blacksquare") == null)
      return;

    var blackSquare = PlayState.instance.currentStage.getNamedProp('blacksquare');

    if (duration <= 0.5){
      blackSquare.alpha = opacity;
      return;
    }

    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;
    FlxTween.tween(blackSquare, {alpha: opacity}, durSeconds,
    {
        ease: FlxEase.linear,
    });
  }

  function startVideo(part:Int = 1):Void {
    switch (part) {
      case 1:
        VideoCutscene.play(Paths.videos(this.id + (nonsenseModule.scriptCall('getFailedSongs').indexOf("Baffled") != -1 ? '-bad' : '-good')));
      case 2:
        VideoCutscene.play(Paths.videos(this.id + '-after'));
    }

  }
}
