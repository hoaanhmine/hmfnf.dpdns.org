import flixel.FlxSprite;
import funkin.play.character.BaseCharacter;
import funkin.play.PlayState;
// Data from the chart
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;

// Data from the event schema
import funkin.play.event.ScriptedSongEvent;

class SkillCheckEvent extends ScriptedSongEvent{
    var nonsenseModule:Module;

    public function new(){
        super('SkillCheck');
    }

    public override function handleEvent(data:SongEventData)
    {
        // Does nothing if there is no PlayState camera or stage.
        if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
    
        var targetName = data.getString('target');
        var goodAnim = data.getString('good anim');
        var badAnim = data.getString('bad anim');
        var skillRate:Int = data.getInt('skill');
        var force = data.getBool('force');

        nonsenseModule = ModuleHandler.getModule('nonsense-module');
        var curSkill:Int = nonsenseModule.scriptCall('skillCheckCalculation');

        if (force == null) force = false;
    
        var target:FlxSprite = null;
    
        switch (targetName)
        {
        case 'bf':
            trace('Playing animation $anim on boyfriend.');
            target = PlayState.instance.currentStage.getBoyfriend();
        case 'dad':
            trace('Playing animation $anim on dad.');
            target = PlayState.instance.currentStage.getDad();
        case 'gf':
            trace('Playing animation $anim on girlfriend.');
            target = PlayState.instance.currentStage.getGirlfriend();
        default:
            target = PlayState.instance.currentStage.getNamedProp(targetName);
            if (target == null) trace('Unknown animation target: $targetName');
            else
            trace('Fetched animation target $targetName from stage.');
        }
    
        if (target == null)
        {
            return;
        }

        if (curSkill >= skillRate && goodAnim != ''){
            if (Std.isOfType(target, BaseCharacter))
            {
                var targetChar:BaseCharacter = target;
                
                trace('Playing good animation $goodAnim on target $targetName.');
                targetChar.playAnimation(goodAnim, force, force);
            }
            else
            {
                trace('Playing good animation $goodAnim on target $targetName.');
                target.animation.play(goodAnim, force);
            }
            
        }else if (badAnim != ''){
            if (Std.isOfType(target, BaseCharacter))
            {
                var targetChar:BaseCharacter = target;

                trace('Playing bad animation $badAnim on target $targetName.');
                targetChar.playAnimation(badAnim, force, force);
            }
            else
            {
                trace('Playing bad animation $badAnim on target $targetName.');
                target.animation.play(badAnim, force);
            }
        }
    }
    
    public override function getTitle():String
    {
        return "Play Animation Skill Check";
    }
    
    /**
     * ```
     * {
     *   "target": STRING, // Name of character or prop to point to.
     *   "good anim": STRING, // Name of animation to play when high skill.
     *   "bad anim": STRING, // Name of animation to play when low skill.
     *   "force": BOOL, // Whether to force the animation to play.
     *   "skill": INT, // Rating number threshold to play the good anim. if number isn't reached, then play bad anim. 0 = bad, 1 = decent, 2 = good.
     * }
     * @return SongEventSchema
     */
    public override function getEventSchema()
    {
        return([
        {
            name: 'target',
            title: 'Target',
            type: 'string',
            defaultValue: 'bf',
        },
        {
            name: 'good anim',
            title: 'Good Animation',
            type: 'string',
            defaultValue: '',
        },
        {
            name: 'bad anim',
            title: 'Bad Animation',
            type: 'string',
            defaultValue: '',
        },
        {
            name: 'force',
            title: 'Force',
            type: 'bool',
            defaultValue: false
        },
        {
            name: 'skill',
            title: 'Skill Rating\nTo Play Good\nAnimation',
            type: 'enum',
            defaultValue: 0,
            keys: [
                'Bad' => 0,
                'Decent' => 1,
                'Good' => 2,
              ]
        }
        ]);
    }
}
