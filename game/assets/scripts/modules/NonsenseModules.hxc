import funkin.play.PlayState;
import funkin.Highscore;
import flixel.FlxSprite;
import funkin.play.character.BaseCharacter;
import funkin.modding.module.Module;

class NonsenseModules extends Module {

  var failed_songs: Array<String> = []; //makes a list counting the names of the songs that failed

  function new() {
    super("nonsense-module");
  }

  public function addFailedSong(songName: String):Void {
    failed_songs.push(songName);
  }

  public function clearFailedSongs():Void {
    failed_songs = [];
  }

  public function getFailedSongs():Array<String> {
    return failed_songs;
  }

	public function playAnimation(targetName: String, anim:String, force:Bool = false):Void {
		var target:BaseCharacter = null;

    switch (targetName)
    {
      case 'bf':
        trace('Playing animation $anim on boyfriend.');
        target = PlayState.instance.currentStage.getBoyfriend();
      case 'dad':
        trace('Playing animation $anim on dad.');
        target = PlayState.instance.currentStage.getDad();
      case 'gf':
        trace('Playing animation $anim on girlfriend.');
        target = PlayState.instance.currentStage.getGirlfriend();
      default:
        trace('Unknown animation target: $targetName');
    }

    if (target != null)
    {
      target.playAnimation(anim, force, force);
    }
	}

  public function getAnimation(targetName: String):String {
		var target:FlxSprite = null;
		switch (targetName)
    {
      case 'bf':
        trace('Playing animation $anim on boyfriend.');
        target = PlayState.instance.currentStage.getBoyfriend();
      case 'dad':
        trace('Playing animation $anim on dad.');
        target = PlayState.instance.currentStage.getDad();
      case 'gf':
        trace('Playing animation $anim on girlfriend.');
        target = PlayState.instance.currentStage.getGirlfriend();
      default:
        target = PlayState.instance.currentStage.getNamedProp(targetName);
        if (target == null) trace('Unknown animation target: $targetName');
        else
          trace('Fetched animation target $targetName from stage.');
    }
		if (target != null) {
			return target.getCurrentAnimation();
		}
	}

  public function skillCheckCalculation():Int{
    var totalCurrentNotes = Highscore.tallies.totalNotesHit + Highscore.tallies.missed;
    var rating_num = 1;

    if (totalCurrentNotes < 30) return rating_num;

    var cur_health = (PlayState.instance.health / 2.0) * 100.0;
    var final_val = 80;
    var notesHit = Highscore.tallies.totalNotesHit;

    if (Highscore.tallies == null) {
        trace("Error: Highscore.tallies is null");
        return rating_num;
    }

		var skillCheck:Float = (Highscore.tallies.sick +
			(Highscore.tallies.good / 2.0)) /
			(Highscore.tallies.totalNotesHit +
			Highscore.tallies.missed);

    skillCheck *= 100.0; // convert to percentage

    if (skillCheck < 70 || cur_health < 70) { //first checks skill if player is good
      rating_num = 0; // bad
    } else if (skillCheck > 90 && cur_health >= 100) {
        rating_num = 2; // good
    } else {
        rating_num = 1; // decent
    }

    //trace(skillCheck);
    //final_val = (notesHit != 0) ? (skillSummary / 1.0) * 100 : final_val;
		return rating_num;
	}
}
