import flixel.FlxG;
import funkin.ui.story.Level;
import funkin.save.Save;
import funkin.ui.story.LevelProp;
import flixel.util.FlxTimer;

class WeekNHLevel extends Level
{
  var fakeSongListArray:Array<String>;

  var nonsenseProp:LevelProp = null;
  var curAnimTimer:FlxTimer = null;

	function new()
	{
		super('weeknh');

    curAnimTimer = new FlxTimer();
	}

  override function isUnlocked():Bool {
    return true;
  }

  override function getSongDisplayNames(difficultyId:String):Array<String> {
    //if (Save.instance.hasBeatenLevel('weeknh')) why does the current version set this to always true??
    if (Save.instance.hasBeatenSong('Reoccurance') && Save.instance.hasBeatenSong('Baffled') && Save.instance.hasBeatenSong('Contextual'))  {
      
      fakeSongListArray = ["Reoccurance", "Baffled", "Contextual"];

      if (Save.instance.hasBeatenSong('gibberish')){
        fakeSongListArray.push("Gibberish");
      }
      if (Save.instance.hasBeatenSong('get-out')){
        fakeSongListArray.push("Get Out");
      }

    }
    else {
      fakeSongListArray = ["Common Sense", "Highlights", "Context", "Nonsense"];
    }
    return fakeSongListArray;
  }

  override function getDifficulties():Array<String>
  {
    return ['hard'];
  }

  override function buildProps(?existingProps:Array<LevelProp>):Array<LevelProp> // this is the same reused code but with a slight modification
  {
    var props:Array<LevelProp> = existingProps == null ? [] : [for (x in existingProps) x];

    if (_data.props.length == 0) return props;

    var hiddenProps:Array<LevelProp> = props.splice(_data.props.length - 1, props.length - 1);
    for (hiddenProp in hiddenProps)
    {
      hiddenProp.visible = false;
    }

    for (propIndex in 0..._data.props.length)
    {
      var propData:LevelPropData = _data.props[propIndex];

      // Attempt to reuse the `LevelProp` object.
      // This prevents animations from resetting.
      var existingProp:Null<LevelProp> = props[propIndex];
      if (existingProp != null)
      {
        existingProp.propData = propData;
        if (existingProp.propData == null)
        {
          existingProp.visible = false;
        }
        else
        {
          existingProp.visible = true;
          existingProp.x = propData.offsets[0] + FlxG.width * 0.25 * propIndex;
          // if (propSprite.hasAnimation('intro')){
          //   propSprite.playAnimation('intro', true, true);
          // }
        }
      }
      else
      {
        var propSprite:Null<LevelProp> = LevelProp.build(propData);
        if (propSprite == null) continue;

        propSprite.x = propData.offsets[0] + FlxG.width * 0.25 * propIndex;
        props.push(propSprite);
      }
    }

    for (prop in props)
    {
      if (prop.hasAnimation('intro'))
      {
        playIntroAnimation(prop);
      }
    }
    return props;
  }

  function playIntroAnimation(prop:LevelProp):Void
  {
    curAnimTimer.reset();
    
    var curProp:Null<LevelProp> = prop;

    curProp.playAnimation('intro');

    curAnimTimer = curAnimTimer.start(1.5, function(tmr)
    {
      curProp.playAnimation('loop');
    });
  }
}
