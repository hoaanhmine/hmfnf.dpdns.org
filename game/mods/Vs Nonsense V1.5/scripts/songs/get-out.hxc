import funkin.play.song.Song;
import funkin.modding.module.Module;
import funkin.modding.module.ModuleHandler;
import funkin.play.PlayStatePlaylist;
import funkin.play.PlayState;
import funkin.audio.FunkinSound;
import funkin.save.Save;
import funkin.Conductor;
import flixel.tweens.FlxTween;
import funkin.play.cutscene.VideoCutscene;
import funkin.graphics.FunkinSprite;
import funkin.play.cutscene.CutsceneType;

class GetOutSong extends Song {
  var nonsenseModule:Module;

  var goodDialogue:FunkinSound;
  var badDialogue:FunkinSound;

  var playedVidCutscene:Bool = false;
  var playedVidEnding:Bool = false;

  function new() {
    super('get-out');
  }

  function onCreate(event:ScriptEvent):Void
  {
    super.onCreate(event);
    nonsenseModule = ModuleHandler.getModule('nonsense-module');
    nonsenseModule.scriptCall('clearFailedSongs');

    playedVidCutscene = false;
    playedVidEnding = false;
  }

  public override function onCountdownStart(event:CountdownScriptEvent):Void {
		super.onCountdownStart(event);

    if (!PlayStatePlaylist.isStoryMode){
      playedVidCutscene = true;
      playedVidEnding = true;
    }

    trace(playedVidCutscene);

    if (!playedVidCutscene) {
      trace('Pausing countdown to play a video cutscene (`darnell`)');

      playedVidCutscene = true;

      event.cancel(); // CANCEL THE COUNTDOWN!

			// trace('Adding black background behind cutscene over UI');

      startVideo();
      //PlayState.instance.startCountdown();
    }
  }

  function onSongLoaded(event:SongLoadScriptEvent):Void {
    var playStateVocals:VoicesGroup = PlayState.instance.vocals;

    var goodChatter:FunkinSound = FunkinSound.load(Paths.voices(this.id, '-chatter-good'), 0.0);
    var badChatter:FunkinSound = FunkinSound.load(Paths.voices(this.id, '-chatter-bad'), 0.0);

    if (playStateVocals.getOpponentVoice(1) == null){
      playStateVocals.addOpponentVoice(goodChatter);
      playStateVocals.addOpponentVoice(badChatter);
    }
    goodDialogue = playStateVocals.getOpponentVoice(1);
    badDialogue = playStateVocals.getOpponentVoice(2);
  }

  public function listDifficulties(variationId:String, variationIds:Array<String>, showLocked:Bool):Array<String> {
		if (showLocked || Save.instance.hasBeatenSong(this.id)) {
			return super.listDifficulties(variationId, variationIds);
		}

		// Hide all difficulties if the player has not beaten the week.
		return [];
	}

  function onSongStart(event:ScriptEvent):Void {
    goodDialogue.volume = 0;
    badDialogue.volume = 0;
  }

  function onBeatHit(event:SongTimeScriptEvent):Void {
    if (event.beat == 157){
      if (nonsenseModule.scriptCall('skillCheckCalculation') >= 2){
        goodDialogue.volume = .8;
      }else{
        badDialogue.volume = 0.8;
      }
    }
    //reSyncDialogue();
  }

  function onSongEnd(event:ScriptEvent):Void {

    nonsenseModule.scriptCall('clearFailedSongs');

    if (PlayStatePlaylist.isStoryMode && !playedVidEnding){
      event.cancel();
      

      bgSprite = new FunkinSprite(0, 0);
			bgSprite.makeSolidColor(2000, 2500, 0xFF000000);
			bgSprite.cameras = [PlayState.instance.camCutscene]; // Show over the HUD but below the video.
			// this
			bgSprite.zIndex = -10000;
			PlayState.instance.add(bgSprite);
			PlayState.instance.refresh();

      playedVidEnding = true;
      startVideo(true);
    }
  }

  function startVideo(ending:Bool = false) {
    if (ending) {
      VideoCutscene.play(Paths.videos(this.id + "-ending" + (nonsenseModule.scriptCall('skillCheckCalculation') >= 2 ? '-good' : '-bad')), CutsceneType.ENDING);
    }else{
      VideoCutscene.play(Paths.videos(this.id));
    }
  }

  // this used to be the original resync process but I found out you can add voices in a group lol
  
  // function reSyncDialogue():Void {
  //   var targetTime = Math.min(FlxG.sound.music.length, Math.max(0, Conductor.instance.songPosition - Conductor.instance.combinedOffset));

  //   if (goodDialogue.isPlaying && goodDialogue.volume > 0 &&
  //     Math.abs(goodDialogue.time - targetTime) > 5){
  //     goodDialogue.pause();

  //     goodDialogue.time = targetTime;
  //     goodDialogue.play(false, targetTime);
  //     trace("good dialogue RESYNC");
  //   }

  //   if (badDialogue.isPlaying && badDialogue.volume > 0 &&
  //     (badDialogue.time > Conductor.instance.songPosition + 60 || badDialogue.time < Conductor.instance.songPosition - 60)){

  //     badDialogue.pause();
  //     badDialogue.time = targetTime;
  //     badDialogue.play(false, targetTime);
  //     trace("bad dialogue RESYNC");
  //   }
  // }
}
